/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.taptech.common.security.token;

import com.taptech.common.security.user.UserContextPermissions;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-01T23:04:01.687503-04:00[America/New_York]")
@Validated
@Tag(name = "public", description = "the public API")
public interface TokenApi {

    default TokenApiApiDelegate getDelegate() {
        return new TokenApiApiDelegate() {};
    }

    /**
     * GET /public/jwkKeys : public keys endpoint
     * get public keyset
     *
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getJwkKeys",
        summary = "public keys endpoint",
        tags = { "Public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectNode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/jwkKeys",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<ObjectNode>> getJwkKeys(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getJwkKeys(exchange);
    }


    /**
     * GET /public/login : get token with username/password
     * Open endpoint
     *
     * @param authorization authorization (required)
     * @param contextId contextId (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPublicLogin",
        summary = "get token with username/password",
        tags = { "Public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectNode.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/login",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<ObjectNode>> getPublicLogin(
        @Parameter(name = "authorization", description = "authorization", required = true) @RequestHeader(value = "authorization", required = true) String authorization,
        @Parameter(name = "contextId", description = "contextId") @RequestHeader(value = "contextId", required = false) String contextId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getPublicLogin(authorization, contextId, exchange);
    }

    /**
     * GET /public/logout : logout
     *
     * @param authorization authorization (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
            operationId = "publicLogout",
            summary = "logout",
            tags = { "Public" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectNode.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "404", description = "Not Found")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/public/logout",
            produces = { "application/json" }
    )
    default Mono<ResponseEntity<ObjectNode>> publicLogout(
            @Parameter(name = "authorization", description = "authorization", required = true) @RequestHeader(value = "authorization", required = true) String authorization,
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().publicLogout(authorization, exchange);
    }

    /**
     * GET /public/refresh : get token with refresh token
     * Open endpoint
     *
     * @param authorization authorization (required)
     * @param contextId contextId (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
            operationId = "getPublicRefresh",
            summary = "get token with username/password",
            tags = { "Public" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectNode.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "403", description = "Forbidden"),
                    @ApiResponse(responseCode = "404", description = "Not Found")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/public/refresh",
            produces = { "application/json" }
    )
    default Mono<ResponseEntity<ObjectNode>> getPublicRefresh(
            @Parameter(name = "authorization", description = "authorization", required = true) @RequestHeader(value = "authorization", required = true) String authorization,
            @Parameter(name = "contextId", description = "contextId") @RequestHeader(value = "contextId", required = false) String contextId,
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getPublicRefresh(authorization, contextId, exchange);
    }


    /**
     * GET /public/validate : validate a token and send back its claims
     * validate a token
     *
     * @param authorization authorization (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "validateToken",
        summary = "validate a token and send back its claims",
        tags = { "Public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectNode.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/validate",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserContextPermissions>> validateToken(
        @Parameter(name = "authorization", description = "authorization", required = true) @RequestHeader(value = "authorization", required = true) String authorization,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().validateToken(authorization, exchange);
    }

}
